/* Definicion del pasers con CUP para el analisis de la gramatica. */

/* Imports que se ocupan */
package parser;

import java_cup.runtime.*;
import lexer.*;
import java.io.*;

/* Parsers */
parser code {:

    // Iniciar.
    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
        System.err.println("Uso: java parser <archivo_fuente>");
        System.exit(1);
        }

        // Cargar el lexer.
        java.io.FileReader file = new java.io.FileReader(args[0]);
        Lexer lexer = new Lexer(file);
        parser p = new parser(lexer);

        // Revisar si se puede cargar o no.
        try {
            p.parse();
            System.out.println("El archivo fue reconocido por la gramatica.");
        } catch (Exception e) {
            System.err.println("Error durante el analisis sintactico: " + e.getMessage());
        }
    }
:};

/* DefiniciÃ³n de terminales (tokens) */
// Son las palabras reservadas
terminal LET, GLOBAL, VOID, PRINCIPAL, DECIDE, OF, ELSE, END, LOOP, EXIT;
terminal  WHEN, FOR, STEP, TO, DOWNTO, DO, RETURN, BREAK, OUTPUT, INPUT;


// Tipos de datos
terminal INT, FLOAT, BOOLEAN, CHAR, STRING;

// Literales de los tipos de datos, esta es la representacion en string.
terminal Integer INT_LITERAL;
terminal Double FLOAT_LITERAL;
terminal String STRING_LITERAL;
terminal Character CHAR_LITERAL;
terminal Boolean TRUE, FALSE;

// Identificadores.
terminal IDENTIFICADOR;

// Operadores aritmeticos
terminal MAS, MENOS, MULTIPLICACION, DIVISION, DIVISION_ENTERA, MODULO, POTENCIA;
terminal INCREMENTO, DECREMENTO;

// Operadores relacionales
terminal IGUAL, DIFERENTE, MENOR_IGUAL, MAYOR_IGUAL, MENOR, MAYOR;

// Operadores logicos
terminal AND, OR, NOT;

// Asignacion
terminal ASIGNACION;

// Delimitadores y separadores
terminal DELIMITADOR, COMA;
terminal PAREN_I, PAREN_D,CORCHETE_I, CORCHETE_D, LLAVE_I, LLAVE_D;

// La flecha para los if y el concatenador de los prints.
terminal FLECHA, CONCATENACION_OUTPUT;

// Terminar para la deficion de errores lexicos.
terminal ERROR;




/* -------------->>>> Seccion para los no terminales */

/* >> Estructura general*/
non terminal programa, principal, funciones, funcion, params, param;

/* >> Sentencias y bloques */
non terminal bloque, sentencias, sentencia;

/* >> Declaraciones y variables */
non terminal var, varAsignacion, varCyAsignacion, varGlobal;

/* >> Expresiones  */

non terminal expresion;

/* > Numericas */
non terminal expresionNumerica, expresionSuma, expresionProducto, expresionPotencia, expresionFactor, expresionAritmeticaUnaria, expresionAritmeticaUnariaNegativa;

/* > Boolenas  */
non terminal expresionBooleana;

/* > Literales */
non terminal  expresionChar, expresionString;

/* > Expresiones compuestas */
non terminal expresionAritmetica, expresionLogica, expresionRelacional;

/* >> Control de flujo */
non terminal estructruraControl, decide, condicion, loop, for;

/* >> Funciones y sus llamadas  */
non terminal funcionLlamada, argumentos, return, break;

/* >> Input y ouput */
non terminal input, output, output_inline;

/* >> Listas */
non terminal lista, declaracionLista, creacionYAsignacionLista, elementos, elementoLista, modificarElementoLista, obtenerElementoLista;



/* Precedencia de operadores (de menor a mayor precedencia) */

// Operadores binarios
precedence left OR;
precedence left AND;
precedence right NOT;

/* Operadores booleanos y relacionales */
precedence left IGUAL, DIFERENTE;
precedence left MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL;

/* Operadores aritmeticos */
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, DIVISION_ENTERA, MODULO;
precedence right POTENCIA;

// Operadores unarios
precedence left INCREMENTO, DECREMENTO;
precedence right MEOS; /* Pasar a negativo: Revisar la gramatica original para una posible correccion. */


/* Precedencia para resolver conflictos */
precedence left COMA;
precedence right ASIGNACION;




/* Esta es la que dice como se inicia todo. */
start with programa;


/* -------------------------  >> Definicion << -------------------------------------------------------------------  */










/* ##### Seccion para las expresiones ######*/
expresion ::= expresionAritmetica
            | expresionLogica
            | expresionChar
            | expresionString;


expresionLogica ::= expresionLogica AND expresionLogica
                  | expresionLogica OR expresionLogica
                  | NOT expresionLogica
                  | PAREN_I expresionLogica PAREN_D
                  | expresionRelacional
                  | expresionBooleana;
                 
expresionRelacional ::= expresionAritmetica IGUAL expresionAritmetica
                      | expresionAritmetica DIFERENTE expresionAritmetica
                      | expresionAritmetica MENOR expresionAritmetica
                      | expresionAritmetica MAYOR expresionAritmetica
                      | expresionAritmetica MENOR_IGUAL expresionAritmetica
                      | expresionAritmetica MAYOR_IGUAL expresionAritmetica
                      | expresionBooleana IGUAL expresionBooleana
                      | expresionChar IGUAL expresionChar
                      | PAREN_I expresionRelacional PAREN_D;

                  

expresionChar ::= CHAR_LITERAL
                | IDENTIFICADOR
                | obtenerElementoLista;

expresionString ::= STRING_LITERAL
                  | IDENTIFICADOR;

expresionBooleana ::= TRUE
                    | FALSE
                    | IDENTIFICADOR;




/* >> Expresiones aritmeticas */

expresionAritmetica ::= expresionSuma;


expresionSuma ::= expresionSuma MAS expresionProducto
                | expresionSuma MENOS expresionProducto
                | expresionProducto;

expresionProducto ::= expresionProducto MULTIPLICACION expresionPotencia
                    | expresionProducto DIVISION expresionPotencia
                    | expresionProducto DIVISION_ENTERA expresionPotencia
                    | expresionProducto MODULO expresionPotencia
                    | expresionPotencia;
          
expresionPotencia ::= expresionFactor POTENCIA expresionPotencia
                    | expresionFactor;


expresionFactor ::= PAREN_I expresionAritmetica PAREN_D
                  | expresionNumerica
                  | expresionAritmeticaUnaria
                  | expresionAritmeticaUnariaNegativa;

expresionNumerica ::= INT_LITERAL
                    | FLOAT_LITERAL
                    | IDENTIFICADOR
                    | obtenerElementoLista
                    | funcionLlamada /* Esta psoiblemente se tenga que separar en los dos tipos de llamada */
                    | input;

expresionAritmeticaUnaria ::= IDENTIFICADOR INCREMENTO
                            | IDENTIFICADOR DECREMENTO;

expresionAritmeticaUnariaNegativa ::= MEOS expresionNumerica;

